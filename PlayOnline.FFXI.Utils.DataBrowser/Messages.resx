<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FileTableDialog:StatusFormat">
    <value xml:space="preserve">{0} - {1} file(s) assigned</value>
  </data>
  <data name="FileTableDialog:StatusSorting">
    <value xml:space="preserve">Sorting...</value>
  </data>
  <data name="FFXI1">
    <value xml:space="preserve">Final Fantasy XI</value>
  </data>
  <data name="FFXI2">
    <value xml:space="preserve">Rise of the Zilart</value>
  </data>
  <data name="FFXI3">
    <value xml:space="preserve">Chains of Promathia</value>
  </data>
  <data name="InvalidEntry">
    <value xml:space="preserve">&lt;invalid entry&gt;</value>
  </data>
  <data name="Menu:Dialog Tables">
    <value xml:space="preserve">&amp;Dialog Tables</value>
  </data>
  <data name="Menu:English">
    <value xml:space="preserve">&amp;English</value>
  </data>
  <data name="Menu:Japanese">
    <value xml:space="preserve">&amp;Japanese</value>
  </data>
  <data name="Menu:Images">
    <value xml:space="preserve">&amp;Images</value>
  </data>
  <data name="Menu:Maps">
    <value xml:space="preserve">&amp;Maps</value>
  </data>
  <data name="Menu:MapN">
    <value xml:space="preserve">Map &amp;{0}</value>
  </data>
  <data name="Menu:Other">
    <value xml:space="preserve">&amp;Other</value>
  </data>
  <data name="Menu:Fonts+Menus">
    <value xml:space="preserve">&amp;Fonts &amp;&amp; Menus</value>
  </data>
  <data name="Menu:Rank (Bastok)">
    <value xml:space="preserve">&amp;Rank (Bastok)</value>
  </data>
  <data name="Menu:Rank (Windurst)">
    <value xml:space="preserve">&amp;Rank (Windurst)</value>
  </data>
  <data name="Menu:Rank (San d'Oria)">
    <value xml:space="preserve">&amp;Rank (San d'Oria)</value>
  </data>
  <data name="Menu:UI Windows">
    <value xml:space="preserve">&amp;UI Windows</value>
  </data>
  <data name="Menu:StyleN">
    <value xml:space="preserve">Style &amp;</value>
  </data>
  <data name="Menu:Item Data">
    <value xml:space="preserve">I&amp;tem Data</value>
  </data>
  <data name="Menu:Items1">
    <value xml:space="preserve">Items (Part &amp;1)</value>
  </data>
  <data name="Menu:Items2">
    <value xml:space="preserve">Items (Part &amp;2)</value>
  </data>
  <data name="Menu:Unused">
    <value xml:space="preserve">Unused</value>
  </data>
  <data name="Menu:Armor">
    <value xml:space="preserve">Armor</value>
  </data>
  <data name="Menu:Weapons">
    <value xml:space="preserve">Weapons</value>
  </data>
  <data name="Menu:String Tables">
    <value xml:space="preserve">&amp;String Tables</value>
  </data>
  <data name="Menu:Common">
    <value xml:space="preserve">&amp;Common</value>
  </data>
  <data name="Menu:Abilities">
    <value xml:space="preserve">&amp;Abilities</value>
  </data>
  <data name="Menu:AreaNames">
    <value xml:space="preserve">&amp;Area Names</value>
  </data>
  <data name="Menu:AreaNamesAlt">
    <value xml:space="preserve">&amp;Area Names (Alternate)</value>
  </data>
  <data name="Menu:AreaNamesShort">
    <value xml:space="preserve">&amp;Area Names (Search)</value>
  </data>
  <data name="Menu:ChatFilterTypes">
    <value xml:space="preserve">&amp;Chat Filter Types</value>
  </data>
  <data name="Menu:DayNames">
    <value xml:space="preserve">&amp;Day Names</value>
  </data>
  <data name="Menu:Directions">
    <value xml:space="preserve">&amp;Directions</value>
  </data>
  <data name="Menu:ErrorMessages">
    <value xml:space="preserve">&amp;Error Messages</value>
  </data>
  <data name="Menu:InGameMessages1">
    <value xml:space="preserve">&amp;In-Game Messages (1)</value>
  </data>
  <data name="Menu:InGameMessages2">
    <value xml:space="preserve">&amp;In-Game Messages (2)</value>
  </data>
  <data name="Menu:JobNames">
    <value xml:space="preserve">&amp;Job Names</value>
  </data>
  <data name="Menu:JobNamesShort">
    <value xml:space="preserve">&amp;Job Names (Short)</value>
  </data>
  <data name="Menu:MenuItemDesc">
    <value xml:space="preserve">&amp;Menu Item Descriptions</value>
  </data>
  <data name="Menu:MenuItemText">
    <value xml:space="preserve">&amp;Menu Item Text</value>
  </data>
  <data name="Menu:MoonPhases">
    <value xml:space="preserve">&amp;Moon Phases</value>
  </data>
  <data name="Menu:POLMessages">
    <value xml:space="preserve">&amp;POL Messages</value>
  </data>
  <data name="Menu:Quests">
    <value xml:space="preserve">Quests / Missions / Key Items</value>
  </data>
  <data name="Menu:RaceNames">
    <value xml:space="preserve">&amp;Race Names</value>
  </data>
  <data name="Menu:RegionNames">
    <value xml:space="preserve">&amp;Region Names</value>
  </data>
  <data name="Menu:Spells">
    <value xml:space="preserve">&amp;Spells</value>
  </data>
  <data name="Menu:Status">
    <value xml:space="preserve">&amp;Status</value>
  </data>
  <data name="Menu:Time+Pronouns">
    <value xml:space="preserve">&amp;Time-Related Terms + Pronouns</value>
  </data>
  <data name="Menu:Titles">
    <value xml:space="preserve">&amp;Titles</value>
  </data>
  <data name="Menu:TransportRoutes">
    <value xml:space="preserve">&amp;Transport Routes</value>
  </data>
  <data name="Menu:Various1">
    <value xml:space="preserve">&amp;Various (1)</value>
  </data>
  <data name="Menu:Various2">
    <value xml:space="preserve">&amp;Various (2)</value>
  </data>
  <data name="Menu:Various3">
    <value xml:space="preserve">&amp;Various (3)</value>
  </data>
  <data name="Menu:WeatherTypes">
    <value xml:space="preserve">&amp;Weather Types</value>
  </data>
  <data name="AbilityCheck">
    <value xml:space="preserve">Checking whether the file contains ability information...</value>
  </data>
  <data name="AbilityLoad">
    <value xml:space="preserve">Loading ability information - please wait...</value>
  </data>
  <data name="AbilityLoadProgress">
    <value xml:space="preserve">Loading ability information ({0}/{1}) - please wait...</value>
  </data>
  <data name="DialogCheck">
    <value xml:space="preserve">Checking whether the file contains dialog strings...</value>
  </data>
  <data name="DialogLoad">
    <value xml:space="preserve">Loading dialog strings - please wait...</value>
  </data>
  <data name="DialogLoadProgress">
    <value xml:space="preserve">Loading dialog strings ({0}/{1}) - please wait...</value>
  </data>
  <data name="ImageScan">
    <value xml:space="preserve">Scanning file for images - please wait...</value>
  </data>
  <data name="ImageScanProgress">
    <value xml:space="preserve">Scanning file for images ({0} found so far) - please wait...</value>
  </data>
  <data name="ItemCheck">
    <value xml:space="preserve">Checking whether the file contains item data...</value>
  </data>
  <data name="ItemLoad">
    <value xml:space="preserve">Loading item information - please wait...</value>
  </data>
  <data name="ItemLoadProgress">
    <value xml:space="preserve">Loading item information ({0}/{1}) - please wait...</value>
  </data>
  <data name="QuestCheck">
    <value xml:space="preserve">Checking whether the file contains quest/mission/key item information...</value>
  </data>
  <data name="QuestLoad">
    <value xml:space="preserve">Loading quest/mission/key item information - please wait...</value>
  </data>
  <data name="QuestLoadProgress">
    <value xml:space="preserve">Loading quest/mission/key item information (section '{0}', entry {1} of {2}) - please wait...</value>
  </data>
  <data name="SpellCheck">
    <value xml:space="preserve">Checking whether the file contains spell information...</value>
  </data>
  <data name="SpellLoad">
    <value xml:space="preserve">Loading spell information - please wait...</value>
  </data>
  <data name="SpellLoadProgress">
    <value xml:space="preserve">Loading spell information ({0}/{1}) - please wait...</value>
  </data>
  <data name="StatusCheck">
    <value xml:space="preserve">Checking whether the file contains status information...</value>
  </data>
  <data name="StatusLoad">
    <value xml:space="preserve">Loading status information - please wait...</value>
  </data>
  <data name="StatusLoadProgress">
    <value xml:space="preserve">Loading status information ({0}/{1}) - please wait...</value>
  </data>
  <data name="StringCheck">
    <value xml:space="preserve">Checking whether the file contains a string table...</value>
  </data>
  <data name="StringLoad">
    <value xml:space="preserve">Loading string table entries - please wait...</value>
  </data>
  <data name="StringLoadProgress">
    <value xml:space="preserve">Loading string table entries ({0}/{1}) - please wait...</value>
  </data>
  <data name="Status:ItemSearch">
    <value xml:space="preserve">Searching... ({0} match(es) found so far)</value>
  </data>
  <data name="Status:ItemSearchDone">
    <value xml:space="preserve">Found {0} matching item(s) (out of {1})</value>
  </data>
  <data name="E:Test.Contains">
    <value xml:space="preserve">contains</value>
  </data>
  <data name="E:Test.DoesntContain">
    <value xml:space="preserve">doesn't contain</value>
  </data>
  <data name="E:Test.Equals">
    <value xml:space="preserve">exactly matches</value>
  </data>
  <data name="E:Test.StartsWith">
    <value xml:space="preserve">starts with</value>
  </data>
  <data name="E:Test.EndsWith">
    <value xml:space="preserve">ends with</value>
  </data>
  <data name="E:Test.MatchesRegexp">
    <value xml:space="preserve">matches regexp</value>
  </data>
  <data name="E:Test.DoesntMatchRegexp">
    <value xml:space="preserve">doesn't match regexp</value>
  </data>
  <data name="ColumnHeader:CastTime">
    <value xml:space="preserve">Casting Time</value>
  </data>
  <data name="ColumnHeader:CoolDown">
    <value xml:space="preserve">Cool-Down Time</value>
  </data>
  <data name="ColumnHeader:Description">
    <value xml:space="preserve">Description</value>
  </data>
  <data name="ColumnHeader:Element">
    <value xml:space="preserve">Element</value>
  </data>
  <data name="ColumnHeader:EnglishDescription">
    <value xml:space="preserve">Description (English)</value>
  </data>
  <data name="ColumnHeader:EnglishName">
    <value xml:space="preserve">Name (English)</value>
  </data>
  <data name="ColumnHeader:Entry">
    <value xml:space="preserve">Entry</value>
  </data>
  <data name="ColumnHeader:Index">
    <value xml:space="preserve">Index</value>
  </data>
  <data name="ColumnHeader:JapaneseDescription">
    <value xml:space="preserve">Description (Japanese)</value>
  </data>
  <data name="ColumnHeader:JapaneseName">
    <value xml:space="preserve">Name (Japanese)</value>
  </data>
  <data name="ColumnHeader:Jobs">
    <value xml:space="preserve">Jobs</value>
  </data>
  <data name="ColumnHeader:LineCount">
    <value xml:space="preserve">{0} (Line Count)</value>
  </data>
  <data name="ColumnHeader:LineNumber">
    <value xml:space="preserve">{0} (Line {1})</value>
  </data>
  <data name="ColumnHeader:MPCost">
    <value xml:space="preserve">MP Cost</value>
  </data>
  <data name="ColumnHeader:Name">
    <value xml:space="preserve">Name</value>
  </data>
  <data name="ColumnHeader:RecastTime">
    <value xml:space="preserve">Recast Time</value>
  </data>
  <data name="ColumnHeader:Section">
    <value xml:space="preserve">Section</value>
  </data>
  <data name="ColumnHeader:Skill">
    <value xml:space="preserve">Skill</value>
  </data>
  <data name="ColumnHeader:Status">
    <value xml:space="preserve">Status</value>
  </data>
  <data name="ColumnHeader:Text">
    <value xml:space="preserve">Text</value>
  </data>
  <data name="ColumnHeader:Type">
    <value xml:space="preserve">Type</value>
  </data>
  <data name="ColumnHeader:Unknown">
    <value xml:space="preserve">Unknown</value>
  </data>
  <data name="ColumnHeader:ValidTargets">
    <value xml:space="preserve">Valid Target(s)</value>
  </data>
  <data name="Export:DirDialogDesc">
    <value xml:space="preserve">Select the folder where the exported item data will be placed.  The file name will be based on the data language and type, and will include a timestamp.</value>
  </data>
  <data name="Title:InvalidQuery">
    <value xml:space="preserve">Invalid Query</value>
  </data>
  <data name="Message:InvalidQuery">
    <value xml:space="preserve">Query component #{0} is not valid: {1}
Correct the problem and try again.</value>
  </data>
  <data name="Query:NoEmptyString">
    <value xml:space="preserve">Cannot run this test using an empty string.</value>
  </data>
  <data name="Query:BadRegexp">
    <value xml:space="preserve">Invalid regular expression.</value>
  </data>
  <data name="Query:NoQueryType">
    <value xml:space="preserve">No (valid) query method selected.</value>
  </data>
  <data name="Query:BadQueryType">
    <value xml:space="preserve">Unknown or unhandled query type.</value>
  </data>
  <data name="Dialog:ExportItems">
    <value xml:space="preserve">Exporting item data.
This may take quite a while.</value>
  </data>
  <data name="Dialog:SaveAllImages">
    <value xml:space="preserve">Saving all images to disk.
This may take quite a while.</value>
  </data>
  <data name="Description:BrowseImageExportFolder">
    <value xml:space="preserve">Select the folder where the images should be saved.
WARNING: Existing files with the same name will be overwritten without prompting.</value>
  </data>
</root>